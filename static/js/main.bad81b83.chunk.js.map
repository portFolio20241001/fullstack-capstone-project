{"version":3,"sources":["components/InitialPage/InitialPage.js","config.js","components/MainPage/MainPage.js","context/AuthContext.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/SearchPage/SearchPage.js","components/DetailsPage/DetailsPage.js","components/Profile/Profile.js","components/Navbar/Navbar.js","App.js","index.js"],"names":["InitialPage","_ref","onVisit","React","createElement","className","onClick","config","process","console","log","MainPage","gifts","setGifts","useState","navigate","useNavigate","useEffect","async","url","urlConfig","response","fetch","ok","Error","status","data","json","error","message","fetchGifts","map","gift","key","id","image","src","alt","name","timestamp","date_added","Date","toLocaleDateString","month","day","year","condition","goToDetailsPage","productId","AppContext","createContext","AuthProvider","children","isLoggedIn","setIsLoggedIn","userName","setUserName","Provider","value","useAppContext","useContext","LoginPage","email","setEmail","password","setPassword","incorrect","setIncorrect","bearerToken","sessionStorage","getItem","onSubmit","e","preventDefault","res","method","headers","body","JSON","stringify","authtoken","setItem","userEmail","window","errorTimeout","clearTimeout","setTimeout","htmlFor","type","placeholder","onChange","target","Link","to","RegisterPage","firstName","setFirstName","lastName","setLastName","showerr","setShowerr","SearchPage","searchQuery","setSearchQuery","ageRange","setAgeRange","category","setCategory","setCondition","searchResults","setSearchResults","errorMessage","setErrorMessage","fetchProducts","min","max","baseUrl","queryParams","URLSearchParams","age_years","toString","length","product","description","slice","toLocaleString","role","DetailsPage","useParams","setGift","loading","setLoading","setError","fetchGift","scrollTo","handleBackClick","author","comment","index","Profile","userDetails","setUserDetails","updatedDetails","setUpdatedDetails","changed","setChanged","editMode","setEditMode","fetchUserProfile","storedUserDetails","payload","errorMessages","errors","msg","join","disabled","includes","handleEdit","style","color","height","display","fontStyle","fontSize","Navbar","authTokenFromSession","nameFromSession","removeItem","Fragment","data-toggle","data-target","aria-controls","aria-expanded","aria-label","cursor","profileSecton","handleLogout","App","visited","setVisited","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode","Router"],"mappings":"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","file":"static/js/main.bad81b83.chunk.js","sourcesContent":["import React from 'react';\n\nfunction InitialPage({ onVisit }) {\n  return (\n    <div className=\"container text-center mt-5\">\n      <h1>Welcome to GiftLink</h1>\n      <p>Share Gifts and Joy!</p>\n      <button className=\"btn btn-primary\" onClick={onVisit}>\n        Get Started\n      </button>\n    </div>\n  );\n}\n\nexport default InitialPage;\n","// 設定オブジェクトを作成\nconst config = {\n  // 環境変数からバックエンドのURLを取得して設定\n  backendUrl: process.env.REACT_APP_BACKEND_URL,\n};\n\n// コンソールにバックエンドのURLを出力（デバッグ用）\nconsole.log(`backendUrl in config.js: ${config.backendUrl}`)\n\n// configオブジェクトをurlConfigとしてエクスポート\nexport {config as urlConfig}\n","import React, { useState, useEffect } from 'react'; // React と必要なフックをインポート\nimport { useNavigate } from 'react-router-dom'; // ルーティングのための useNavigate をインポート\nimport { urlConfig } from '../../config'; // URL 設定をインポート\n\nfunction MainPage() {\n    const [gifts, setGifts] = useState([]); // ギフトデータを格納するためのステート変数\n    const navigate = useNavigate(); // ページ遷移用の関数を取得\n\n    useEffect(() => {\n        // タスク1: ギフト情報をフェッチする非同期関数\n        const fetchGifts = async () => {\n            try {\n                let url = `${urlConfig.backendUrl}/api/gifts`; // ギフトAPIのURL\n                const response = await fetch(url); // API からデータを取得\n                if (!response.ok) {\n                    // 応答が正常でない場合\n                    throw new Error(`HTTP error; ${response.status}`); // エラーをスロー\n                }\n                const data = await response.json(); // 応答をJSONに変換\n                setGifts(data); // ギフトデータをステートに設定\n            } catch (error) {\n                console.log('Fetch error: ' + error.message); // エラーメッセージをログに出力\n            }\n        };\n\n        fetchGifts(); // 非同期関数を呼び出し\n    }, []); // 空の依存配列で初回レンダリング時にのみ実行\n\n    // タスク2: 詳細ページへの遷移\n    const goToDetailsPage = (productId) => {\n        console.log(\"aaa\")\n        navigate(`/app/product/${productId}`); // 製品IDを使って詳細ページへ遷移\n    };\n\n    // タスク3: タイムスタンプをフォーマットする関数\n    const formatDate = (timestamp) => {\n        const date = new Date(timestamp * 1000); // タイムスタンプ（秒）をミリ秒に変換\n        return date.toLocaleDateString('default', { month: 'long', day: 'numeric', year: 'numeric' }); // 日付をフォーマットして返す\n    };\n\n    // ギフトの状態に応じたCSSクラスを返す関数\n    const getConditionClass = (condition) => {\n        return condition === \"New\" ? \"list-group-item-success\" : \"list-group-item-warning\"; // 状態が \"New\" なら成功クラス、それ以外は警告クラス\n    };\n\n    return (\n        <div className=\"container mt-5\"> \n            <div className=\"row\">\n                {gifts.map((gift) => (\n                    <div key={gift.id} className=\"col-md-4 mb-4\"> {/* ギフトごとにカードを表示 */}\n                        <div className=\"card product-card\"> {/* ギフトのカード */}\n                            \n                            {/* タスク4: ギフト画像またはプレースホルダーを表示 */}\n                            <div className=\"image-placeholder\">\n                                {gift.image ? (\n                                    <img src={gift.image} alt={gift.name} className=\"card-img-top\" /> // 画像があれば表示\n                                ) : (\n                                    <div className=\"no-image-available\">No Image Available</div> // 画像がなければプレースホルダーを表示\n                                )}\n                            </div>\n\n                            <div className=\"card-body\"> {/* カード本体 */}\n                                {/* タスク5: ギフト名を表示 */}\n                                <h5 className=\"card-title\">{gift.name}</h5> {/* ギフトの名前を表示 */}\n\n                                {/* タスク6: フォーマットされた日付を表示 */}\n                                <p className=\"card-text\">{formatDate(gift.date_added)}</p> {/* 日付をフォーマットして表示 */}\n\n                                <p className={`card-text ${getConditionClass(gift.condition)}`}> {/* ギフトの状態に応じたクラスを適用 */}\n                                    {gift.condition}\n                                </p>\n\n                                <button onClick={() => goToDetailsPage(gift.id)} className=\"btn btn-primary\"> {/* 詳細ページに遷移するボタン */}\n                                    View Details\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default MainPage; // MainPage コンポーネントをエクスポート\n","import React, { createContext, useState, useContext } from 'react';\n\nconst AppContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n\n  return (\n    <AppContext.Provider value={{ isLoggedIn, setIsLoggedIn, userName, setUserName }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = () => useContext(AppContext);\n","import React, { useState, useEffect } from 'react';         // React ライブラリと useState, useEffect フックをインポート\nimport { urlConfig } from '../../config';                   // 設定ファイルから URL 設定をインポート\nimport { useAppContext } from '../../context/AuthContext';  // 認証コンテキストから `useAppContext` をインポート\nimport { useNavigate } from 'react-router-dom';             // React Router の `useNavigate` フックをインポート（ページ遷移用）\nimport { Link } from 'react-router-dom';                    // React Router の `Link` コンポーネントをインポート（リンク作成用）\n\n// ログインページのスタイルシートをインポート\nimport './LoginPage.css';\n\n// ログインページコンポーネントの定義\nfunction LoginPage() {\n    // メールアドレスの入力値を管理するための state（初期値は空文字）\n    const [email, setEmail] = useState('');\n\n    // パスワードの入力値を管理するための state（初期値は空文字）\n    const [password, setPassword] = useState('');\n\n    // 認証エラーメッセージを管理するための state（初期値は空文字）\n    const [incorrect, setIncorrect] = useState('');\n\n    // ページ遷移を制御するための useNavigate フックを使用\n    const navigate = useNavigate();\n\n    // セッションストレージから Bearer トークンを取得（なければ null）\n    const bearerToken = sessionStorage.getItem('bearer-token');\n\n    // グローバルな認証状態を管理するコンテキストから setIsLoggedIn 関数を取得\n    const { setIsLoggedIn } = useAppContext();\n\n    // コンポーネントがマウントされた際に実行される useEffect フック\n    useEffect(() => {\n        // すでに認証トークンが存在する場合、メインページへリダイレクト\n        if (sessionStorage.getItem('auth-token')) {\n            navigate('/app');\n        }\n    }, [navigate]); // 依存配列に navigate を指定し、変更時に再実行\n\n    // ログイン処理を実行する関数（非同期処理）\n    const handleLogin = async (e) => {\n        e.preventDefault(); // フォームのデフォルト送信を防止\n\n        // ログイン API にリクエストを送信\n        const res = await fetch(`${urlConfig.backendUrl}/api/auth/login`, {\n            method: 'POST', // HTTP メソッドを POST に設定\n            headers: {\n                'content-type': 'application/json', // リクエストのデータ形式を JSON に指定\n                'Authorization': bearerToken ? `Bearer ${bearerToken}` : '', // Bearer トークンがあれば追加\n            },\n            body: JSON.stringify({\n                email: email,       // 入力されたメールアドレスを送信\n                password: password, // 入力されたパスワードを送信\n            }),\n        });\n\n        // レスポンスを JSON に変換\n        const json = await res.json();\n        console.log('Json', json); // デバッグ用にレスポンスを出力\n\n        // 認証トークンが含まれている場合、ログイン成功と判断\n        if (json.authtoken) {\n            // 認証情報をセッションストレージに保存\n            sessionStorage.setItem('auth-token', json.authtoken);\n            sessionStorage.setItem('name', json.userName);\n            sessionStorage.setItem('email', json.userEmail);\n\n            // ログイン状態を更新\n            setIsLoggedIn(true);\n\n            // メインページへリダイレクト\n            navigate('/app');\n        } else {\n            // ログイン失敗時の処理\n            setEmail(''); // メールアドレス入力欄をクリア\n            setPassword(''); // パスワード入力欄をクリア\n            console.log(json.error); // エラーメッセージをコンソールに出力\n\n            // エラーメッセージを適切に設定\n            if (json.error === 'パスワードが間違っています') {\n                setIncorrect(\"パスワードが間違っています。もう一度試してください。\");\n            } else if (json.error === 'ユーザーが見つかりません。登録されていないメールアドレスです。') {\n                setIncorrect(\"このメールアドレスは登録されていません。\");\n            } else {\n                setIncorrect(\"ログインに失敗しました。もう一度お試しください。\");\n            }\n\n            // 以前のエラーメッセージをクリアするためのタイマー設定\n            if (window.errorTimeout) clearTimeout(window.errorTimeout);\n            window.errorTimeout = setTimeout(() => setIncorrect(\"\"), 3000);\n        }\n    };\n\n    return (\n        // 画面全体を囲むコンテナ\n        <div className=\"container mt-5\">\n            {/* 画面中央に配置する行 */}\n            <div className=\"row justify-content-center\">\n                {/* 中央配置用のカラム設定 */}\n                <div className=\"col-md-6 col-lg-4\">\n                    {/* ログインフォームのカードデザイン */}\n                    <div className=\"login-card p-4 border rounded\">\n                        {/* タイトル（中央配置・太字） */}\n                        <h2 className=\"text-center mb-4 font-weight-bold\">Login</h2>\n\n                        {/* ログインフォーム */}\n                        <form onSubmit={handleLogin}>\n                            <div className=\"mb-3\">\n                                <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                                <input\n                                    id=\"email\"\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    placeholder=\"Enter your email\"\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                />\n                            </div>\n                            <div className=\"mb-4\">\n                                <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                                <input\n                                    id=\"password\"\n                                    type=\"password\"\n                                    className=\"form-control\"\n                                    placeholder=\"Enter your password\"\n                                    value={password}\n                                    onChange={(e) => setPassword(e.target.value)}\n                                />\n                            </div>\n                            {/* エラーメッセージ（エラー時に表示） */}\n                            {incorrect && <p className=\"text-danger text-center\">{incorrect}</p>}\n                            {/* ログインボタン */}\n                            <button type=\"submit\" className=\"btn btn-primary w-100 mb-3\">Login</button>\n                        </form>\n\n                        {/* 新規登録ページへのリンク */}\n                        <p className=\"mt-4 text-center\">\n                            New here? <Link to=\"/app/register\" className=\"text-primary\">Register Here</Link>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n// LoginPage コンポーネントをエクスポート\nexport default LoginPage;\n","import React, { useState } from 'react';                    // ReactとuseStateフックをインポート\nimport {urlConfig} from '../../config';                     // 設定ファイルからURL情報をインポート\nimport { useAppContext } from '../../context/AuthContext';  // 認証用のコンテキストをインポート\nimport { useNavigate } from 'react-router-dom';             // React Routerのナビゲーションフックをインポート\n\nimport './RegisterPage.css';    // スタイルシートをインポート\n\nimport { Link } from 'react-router-dom';  // Link をインポート\n\n// RegisterPageコンポーネントを定義\nfunction RegisterPage() {\n    // ユーザーの入力値を管理するためのステートを定義\n    const [firstName, setFirstName] = useState(''); // 名\n    const [lastName, setLastName] = useState('');   // 姓\n    const [email, setEmail] = useState('');         // メールアドレス\n    const [password, setPassword] = useState('');   // パスワード\n\n    // エラーメッセージを表示するためのステートを定義\n    const [showerr, setShowerr] = useState('');\n\n    // ナビゲーションを制御するための関数を取得\n    const navigate = useNavigate();\n    \n    // 認証状態を管理する関数を取得\n    const { setIsLoggedIn } = useAppContext();\n\n    // ユーザー登録処理を行う関数\n    const handleRegister = async () => {\n        // APIエンドポイントに対してPOSTリクエストを送信\n        const response = await fetch(`${urlConfig.backendUrl}/api/auth/register`, {\n            method: 'POST', // HTTPメソッドをPOSTに指定\n            headers: {\n                'content-type': 'application/json', // JSONデータを送信するためのヘッダー設定\n            },\n            body: JSON.stringify({      // ユーザーの入力データをJSON形式で送信\n                firstName: firstName,\n                lastName: lastName,\n                email: email,\n                password: password\n            })\n        });\n\n        // サーバーからのレスポンスをJSON形式で取得\n        const json = await response.json();\n        console.log('json data', json); // レスポンスデータをコンソールに出力\n        console.log('er', json.error); // エラーメッセージをコンソールに出力\n\n        // サーバーが認証トークンを返した場合の処理\n        if (json.authtoken) {\n            sessionStorage.setItem('auth-token', json.authtoken);   // 認証トークンをセッションストレージに保存\n            sessionStorage.setItem('name', firstName);              // ユーザー名をセッションストレージに保存\n            sessionStorage.setItem('email', json.email);            // メールアドレスをセッションストレージに保存\n            setIsLoggedIn(true);                                    // ログイン状態をtrueに設定\n            navigate('/app');                                       // ユーザーをアプリのメインページへ遷移\n        }\n\n        // サーバーがエラーを返した場合の処理\n        if (json.error) {\n            setShowerr(json.error); // エラーメッセージをステートに設定\n        }\n    }\n\n    return (\n        // 登録ページの全体コンテナ\n        <div className=\"container mt-5\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-md-6 col-lg-4\">\n                    <div className=\"register-card p-4 border rounded\">\n                        <h2 className=\"text-center mb-4 font-weight-bold\">Register</h2>\n\n                        {/* 名の入力フィールド */}\n                        <div className=\"mb-3\">\n                            <label htmlFor=\"firstName\" className=\"form-label\">FirstName</label>\n                            <input\n                                id=\"firstName\"\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Enter your firstName\"\n                                value={firstName}\n                                onChange={(e) => setFirstName(e.target.value)}\n                            />\n                        </div>\n\n                        {/* 姓の入力フィールド */}\n                        <div className=\"mb-3\">\n                            <label htmlFor=\"lastName\" className=\"form-label\">LastName</label>\n                            <input\n                                id=\"lastName\"\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Enter your lastName\"\n                                value={lastName}\n                                onChange={(e) => setLastName(e.target.value)}\n                            />\n                        </div>\n\n                        {/* メールアドレスの入力フィールド */}\n                        <div className=\"mb-3\">\n                            <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                            <input\n                                id=\"email\"\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Enter your email\"\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                            {/* エラーメッセージ表示用の要素 */}\n                            <div className=\"text-danger\">{showerr}</div>\n                        </div>\n\n                        {/* パスワードの入力フィールド */}\n                        <div className=\"mb-4\">\n                            <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                            <input\n                                id=\"password\"\n                                type=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"Enter your password\"\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            />\n                        </div>\n\n                        {/* 登録ボタン */}\n                        <button className=\"btn btn-primary w-100 mb-3\" onClick={handleRegister}>Register</button>\n\n                        {/* 既存ユーザー向けのログインリンク */}\n                        <p className=\"mt-4 text-center\">\n                            Already a member? <Link to=\"/app/login\" className=\"text-primary\">Login</Link>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n// コンポーネントをエクスポート\nexport default RegisterPage;","import React, { useEffect, useState } from 'react'; // ReactのuseEffectとuseStateをインポート\nimport { useNavigate } from 'react-router-dom'; // ルーティング用のuseNavigateをインポート\nimport 'bootstrap/dist/css/bootstrap.min.css'; // BootstrapのCSSをインポート\nimport { urlConfig } from '../../config'; // バックエンドのURL設定をインポート\n\nfunction SearchPage() { // 検索ページコンポーネント\n    const [searchQuery, setSearchQuery] = useState(''); // 検索クエリの状態を管理\n    const [ageRange, setAgeRange] = useState(1); // 年齢範囲の初期値を1に設定\n    const [category, setCategory] = useState(''); // カテゴリー選択の状態\n    const [condition, setCondition] = useState(''); // 商品状態選択の状態\n    const [searchResults, setSearchResults] = useState([]); // 検索結果の状態を管理\n    const [errorMessage, setErrorMessage] = useState(''); // エラーメッセージ用の状態\n    const categories = ['Living', 'Bedroom', 'Bathroom', 'Kitchen', 'Office']; // カテゴリーの選択肢\n    const conditions = ['New', 'Like New', 'Older']; // 商品の状態の選択肢\n\n    useEffect(() => { // 初回レンダリング時に商品データを取得\n        const fetchProducts = async () => { // 非同期関数でAPIからデータを取得\n            try {\n                let url = `${urlConfig.backendUrl}/api/gifts`; // APIのエンドポイントURLを設定\n                console.log(url); // デバッグ用にURLをコンソールに出力\n                const response = await fetch(url); // APIからデータを取得\n                if (!response.ok) {\n                    throw new Error(`HTTPエラー; ${response.status}`); // エラー処理\n                }\n                const data = await response.json(); // 取得したデータをJSON形式に変換\n                setSearchResults(data); // 取得したデータを状態にセット\n            } catch (error) {\n                setErrorMessage('商品情報の取得に失敗しました。後で再試行してください。'); // ユーザー向けエラーメッセージ\n                console.log('取得エラー: ' + error.message); // エラーをコンソールに出力\n            }\n        };\n\n        fetchProducts(); // fetchProducts関数を実行\n    }, []); // 初回マウント時のみ実行\n\n    const handleSearch = async () => { // 検索ボタンが押されたときの処理\n        const baseUrl = `${urlConfig.backendUrl}/api/search?`; // 検索APIのURLを設定\n        const queryParams = new URLSearchParams({ // クエリパラメータを生成\n            name: searchQuery, // 検索クエリ\n            age_years: ageRange, // 年齢フィルター\n            category: category, // 選択したカテゴリー\n            condition: condition, // 選択した状態\n        }).toString();\n\n        try {\n            const response = await fetch(`${baseUrl}${queryParams}`); // APIを呼び出し\n            if (!response.ok) {\n                throw new Error('検索に失敗しました'); // エラー処理\n            }\n            const data = await response.json(); // 取得したデータをJSON形式に変換\n            setSearchResults(data); // 検索結果を状態にセット\n            setErrorMessage(''); // エラーメッセージをリセット\n        } catch (error) {\n            setErrorMessage('検索結果の取得に失敗しました。後で再試行してください。'); // ユーザー向けエラーメッセージ\n            console.error('検索結果の取得に失敗:', error); // エラーをコンソールに出力\n        }\n    };\n\n    const navigate = useNavigate(); // ルーティング用のnavigate関数を取得\n\n    const goToDetailsPage = (productId) => { // 詳細ページへ遷移する関数\n        navigate(`/app/product/${productId}`); // 商品IDをURLに追加して遷移\n    };\n\n    // Unixタイムスタンプを人間が読みやすい形式に変換する関数\n    const formatDate = (timestamp) => { // 詳細ページへ遷移する関数\n        const date = new Date(timestamp * 1000); // Unix timestamp は秒単位なのでミリ秒に変換\n        return date.toLocaleString(); // ローカルのフォーマットで日付を表示\n    };\n\n\n    return (\n        <div className=\"container mt-5\"> {/* メインコンテナ */}\n            <div className=\"row justify-content-center\"> {/* 中央揃えの行 */}\n                <div className=\"col-md-6\"> {/* カラム設定 */}\n                    <div className=\"filter-section mb-3 p-3 border rounded\"> {/* フィルターセクション */}\n                        <h5>フィルター</h5> {/* フィルターセクションのタイトル */}\n                        <div className=\"d-flex flex-column\"> {/* フィルター項目を縦に配置 */}\n                            <label htmlFor=\"categorySelect\">カテゴリー</label> {/* カテゴリーのラベル */}\n                            <select \n                                id=\"categorySelect\" \n                                className=\"form-control my-1\" \n                                value={category} \n                                onChange={e => setCategory(e.target.value)} // 変更時にstateを更新\n                            >\n                                <option value=\"\">すべて</option> {/* 全カテゴリー選択肢 */}\n                                {categories.map(category => (\n                                    <option key={category} value={category}>{category}</option> \n                                ))}\n                            </select>\n\n                            <label htmlFor=\"conditionSelect\">状態</label> {/* 状態のラベル */}\n                            <select \n                                id=\"conditionSelect\" \n                                className=\"form-control my-1\" \n                                value={condition} \n                                onChange={e => setCondition(e.target.value)} // 変更時にstateを更新\n                            >\n                                <option value=\"\">すべて</option> {/* 全状態選択肢 */}\n                                {conditions.map(condition => (\n                                    <option key={condition} value={condition}>{condition}</option> \n                                ))}\n                            </select>\n\n                            <label htmlFor=\"ageRange\">リリース年が {ageRange} 年未満</label> {/* リリース年フィルターのラベル */}\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                id=\"ageRange\"\n                                min=\"1\"\n                                max=\"10\"\n                                value={ageRange}\n                                onChange={e => setAgeRange(e.target.value)} // スライダーの値を更新\n                            />\n                        </div>\n                    </div>\n\n                    <input\n                        type=\"text\"\n                        className=\"form-control mb-2\"\n                        placeholder=\"アイテムを検索...\"\n                        value={searchQuery}\n                        onChange={e => setSearchQuery(e.target.value)} // 検索クエリを更新\n                    />\n                    <button className=\"btn btn-primary\" onClick={handleSearch}>検索</button> {/* 検索ボタン */}\n                    \n                    {errorMessage && (\n                        <div className=\"alert alert-danger mt-4\">\n                            {errorMessage} {/* エラーメッセージの表示 */}\n                        </div>\n                    )}\n\n                    <div className=\"search-results mt-4\"> {/* 検索結果の表示エリア */}\n                        {searchResults.length > 0 ? (\n                            searchResults.map(product => (\n                                <div key={product.id} className=\"card mb-3\"> {/* 検索結果のカード */}\n                                    {/* 商品画像 */}\n                                    <img src={product.image} alt={product.name} className=\"card-img-top\" /> \n                                    <div className=\"card-body\">\n                                        {/* 商品名 */}\n                                        <h5 className=\"card-title\">{product.name}</h5> \n                                        {/* 商品説明 */}\n                                        <p className=\"card-text\">{product.description.slice(0, 100)}...</p> \n\n                                        <p className=\"card-text\">リリース年：{formatDate(product.date_added)}</p> \n                                    </div>\n                                    <div className=\"card-footer\">\n                                        <button onClick={() => goToDetailsPage(product.id)} className=\"btn btn-primary\">\n                                            詳細を見る\n                                        </button> {/* 詳細ページへ遷移ボタン */}\n                                    </div>\n                                </div>\n                            ))\n                        ) : (\n                            <div className=\"alert alert-info\" role=\"alert\">\n                                商品が見つかりませんでした。フィルターを修正してください。 {/* 検索結果がない場合のメッセージ */}\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default SearchPage; // SearchPageコンポーネントをエクスポート\n","import React, { useEffect, useState } from 'react';  // ReactライブラリとuseEffect、useStateフックをインポート\nimport { useParams, useNavigate } from 'react-router-dom';  // useParamsとuseNavigateをインポート（URLパラメータとページ遷移に使用）\nimport './DetailsPage.css';  // スタイルシートをインポート\nimport { urlConfig } from '../../config';  // URL設定をインポート（バックエンドAPIのURLなど）\n\n//　詳細ページ\nfunction DetailsPage() {\n    // ページ遷移を行うためのフック\n    const navigate = useNavigate();\n    // URLパラメータからproductIdを取得\n    const { productId } = useParams();\n    // ギフトデータを格納するための状態\n    const [gift, setGift] = useState(null);\n    // ローディング中かどうかを管理する状態\n    const [loading, setLoading] = useState(true);\n    // エラーを管理する状態\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        // セッションストレージから認証トークンを取得\n        const authenticationToken = sessionStorage.getItem('auth-token');\n        \n        // 認証トークンがない場合、ログインページにリダイレクト\n        if (!authenticationToken) {\n            navigate('/app/login');\n        }\n\n        // ギフト情報を取得する非同期関数\n        const fetchGift = async () => {\n            try {\n                // ギフト情報を取得するURLを設定\n                const url = `${urlConfig.backendUrl}/api/gifts/${productId}`;\n                \n                // URLに対してGETリクエストを送信\n                const response = await fetch(url);\n\n                // レスポンスが正常でない場合、エラーを投げる\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n\n                // レスポンスのJSONデータを取得\n                const data = await response.json();\n\n                // 取得したデータをgiftステートに設定\n                setGift(data);\n            } catch (error) {\n                // エラーが発生した場合、そのエラーメッセージをセット\n                setError(error.message);\n            } finally {\n                // データ取得完了後、ローディング状態をfalseに変更\n                setLoading(false);\n            }\n        };\n\n        // ギフト情報を取得\n        fetchGift();\n\n        // ページがマウントされた際にスクロール位置を一番上に設定\n        window.scrollTo(0, 0);\n\n    }, [productId, navigate]);  // productIdまたはnavigateが変更されるたびに実行される\n\n    // 戻るボタンがクリックされたときの処理\n    const handleBackClick = () => {\n        // 1つ前のページに戻る\n        navigate(-1);\n    };\n\n    // コメントデータ（ハードコード）\n    const comments = [\n        {\n            author: \"John Doe\",  // コメント投稿者の名前\n            comment: \"I would like this!\"  // コメント内容\n        },\n        {\n            author: \"Jane Smith\",\n            comment: \"Just DMed you.\"\n        },\n        {\n            author: \"Alice Johnson\",\n            comment: \"I will take it if it's still available.\"\n        },\n        {\n            author: \"Mike Brown\",\n            comment: \"This is a good one!\"\n        },\n        {\n            author: \"Sarah Wilson\",\n            comment: \"My family can use one. DM me if it is still available. Thank you!\"\n        }\n    ];\n\n    // ローディング中の場合、ローディングメッセージを表示\n    if (loading) return <div>Loading...</div>;\n\n    // エラーが発生した場合、エラーメッセージを表示\n    if (error) return <div>Error: {error}</div>;\n\n    // ギフトが見つからなかった場合、「Gift not found」を表示\n    if (!gift) return <div>Gift not found</div>;\n\n\n    // Unixタイムスタンプを人間が読みやすい形式に変換する関数\n    const formatDate = (timestamp) => { // 詳細ページへ遷移する関数\n        const date = new Date(timestamp * 1000); // Unix timestamp は秒単位なのでミリ秒に変換\n        return date.toLocaleString(); // ローカルのフォーマットで日付を表示\n    };\n\n\n    return (\n        <div className=\"container mt-5\">\n            {/* 戻るボタン */}\n            <button className=\"btn btn-secondary mb-3\" onClick={handleBackClick}>Back</button>\n            \n            {/* ギフト詳細のカードコンポーネント */}\n            <div className=\"card product-details-card\">\n                <div className=\"card-header text-white\">\n                    {/* ギフト名をタイトルとして表示 */}\n                    <h2 className=\"details-title\">{gift.name}</h2>\n                </div>\n                <div className=\"card-body\">\n                    <div className=\"image-placeholder-large\">\n                        {gift.image ? (\n                            // ギフトに画像があればその画像を表示\n                            <img src={gift.image} alt={gift.name} className=\"product-image-large\" />\n                        ) : (\n                            // 画像がない場合は「画像なし」のメッセージを表示\n                            <div className=\"no-image-available-large\">No Image Available</div>\n                        )}\n                    </div>\n\n                    {/* ギフトの詳細情報を表示 */}\n                    <p><strong>Category:</strong> \n                        {gift.category}  {/* カテゴリ */}\n                    </p>\n                    <p><strong>Condition:</strong> \n                        {gift.condition}  {/* 状態 */}\n                    </p>\n                    <p><strong>Date Added:</strong> \n                        {formatDate(gift.date_added)}  {/* 登録日 */}\n                    </p>\n                    <p><strong>Age (Years):</strong> \n                        {gift.age_years}  {/* ギフトの年数 */}\n                    </p>\n                    <p><strong>Description:</strong> \n                        {gift.description}  {/* ギフトの説明 */}\n                    </p>\n                </div>\n            </div>\n            \n            {/* コメントセクション */}\n            <div className=\"comments-section mt-4\">\n                <h3 className=\"mb-3\">Comments</h3>\n                {/* コメントがあればリストで表示 */}\n                {comments.map((comment, index) => (\n                    <div key={index} className=\"card mb-3\">\n                        <div className=\"card-body\">\n                            {/* コメントの著者名を表示 */}\n                            <p className=\"comment-author\"><strong>{comment.author}:</strong></p>\n                            {/* コメント内容を表示 */}\n                            <p className=\"comment-text\">{comment.comment}</p>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default DetailsPage;  // DetailsPageコンポーネントをエクスポート\n","import React, { useEffect, useState } from \"react\";          // Reactの基本フックをインポート\nimport { useNavigate } from \"react-router-dom\";              // ルーティング用のフックをインポート\nimport './Profile.css'                                       // CSSファイルをインポート\nimport {urlConfig} from '../../config';                      // 設定ファイルからURL情報をインポート\nimport { useAppContext } from '../../context/AuthContext';   // コンテキストをインポート\n\nconst Profile = () => {\n  const [userDetails, setUserDetails] = useState({});       // ユーザーの詳細情報を管理する状態\n  const [updatedDetails, setUpdatedDetails] = useState({}); // 更新後のユーザー情報を管理する状態\n  const { setUserName } = useAppContext();                  // コンテキストからユーザー名の更新関数を取得\n  const [changed, setChanged] = useState(\"\");               // 更新メッセージを管理する状態\n\n  const [editMode, setEditMode] = useState(false);          // 編集モードの状態を管理\n  const navigate = useNavigate();                           // ナビゲーション用の関数を取得\n\n  useEffect(() => {\n    const authtoken = sessionStorage.getItem(\"auth-token\"); // 認証トークンを取得\n    if (!authtoken) {\n      navigate(\"/app/login\");     // 未ログインの場合はログイン画面へ遷移\n    } else {\n      fetchUserProfile();       // ユーザープロフィールを取得\n    }\n  }, [navigate]);\n\n  // ユーザーのプロフィール情報を取得する関数\n  const fetchUserProfile = async () => {\n    try {\n      const authtoken = sessionStorage.getItem(\"auth-token\");   // 認証トークンを取得\n      const email = sessionStorage.getItem(\"email\");            // ユーザーのメールアドレスを取得\n      const name = sessionStorage.getItem(\"name\");              // ユーザー名を取得\n\n        // name または authtoken が存在する場合\n        if (name || authtoken) {\n            // ユーザー情報をオブジェクトとして格納\n            const storedUserDetails = {\n            name: name,  // ユーザーの名前\n            email: email // ユーザーのメールアドレス\n            };\n  \n\n        setUserDetails(storedUserDetails);      // ユーザー詳細を更新\n        setUpdatedDetails(storedUserDetails);   // 更新用のデータも設定\n      }\n    } catch (error) {\n      console.error(error);\n      // エラー発生時の処理\n    }\n  };\n\n  // 編集モードに切り替える関数\n  const handleEdit = () => {\n    setEditMode(true);\n  };\n\n  // 入力フィールドの変更を検知し、状態（updatedDetails）を更新する関数\n  const handleInputChange = (e) => {\n      // 現在のupdatedDetailsの状態を維持しつつ、変更されたフィールドのみを更新する\n      setUpdatedDetails({\n      ...updatedDetails,  // スプレッド構文を使って既存のupdatedDetailsの値を展開\n     [e.target.name]: e.target.value,  // イベント発生元のname属性をキーにして新しい値を設定\n    });\n  };\n  \n\n  // フォーム送信時の処理\n  const handleSubmit = async (e) => {\n    e.preventDefault(); // デフォルトの送信動作を防ぐ\n\n    try {\n      const authtoken = sessionStorage.getItem(\"auth-token\");   // 認証トークンを取得\n      const email = sessionStorage.getItem(\"email\");            // ユーザーのメールアドレスを取得\n\n      if (!authtoken || !email) {\n        navigate(\"/app/login\"); // 未認証の場合はログイン画面へ遷移\n        return;\n      }\n\n      const payload = { ...updatedDetails }; // 更新データを作成\n      const response = await fetch(`${urlConfig.backendUrl}/api/auth/update`, {\n        method: \"PUT\", // HTTPリクエストのメソッドを指定\n        headers: {\n          \"Authorization\": `Bearer ${authtoken}`,   // 認証トークンをヘッダーに追加\n          \"Content-Type\": \"application/json\",       // JSONデータを送信\n          \"Email\": email,                           // ユーザーのメールアドレスをヘッダーに追加\n        },\n        body: JSON.stringify(payload), // JSON形式でデータを送信\n      });\n\n      if (response.ok) {\n        // 更新が成功した場合\n        setUserName(updatedDetails.name);                       // コンテキストのユーザー名を更新\n        sessionStorage.setItem(\"name\", updatedDetails.name);    // セッションストレージのユーザー名を更新\n        setUserDetails(updatedDetails);                         // ユーザー詳細を更新\n        setEditMode(false);                                     // 編集モードを終了\n        setChanged(\"名前が正常に変更されました！\");               // 成功メッセージを表示\n\n        // 一定時間後にメッセージを消してトップページへ遷移\n        setTimeout(() => {\n          setChanged(\"\");\n          navigate(\"/\");\n        }, 1000);\n      } else {\n        console.log(\"エラーポイント1\")\n\n        // エラーメッセージを取得してスロー\n        const errorData = await response.json();\n        const errorMessages = errorData.errors.map(error => error.msg).join(\", \");\n        throw new Error(`エラー!プロフィールの更新に失敗しました: ${errorMessages}`); // エラーをスロー\n\n      }\n    } catch (error) {\n        console.log(\"エラーポイント2\")\n        console.error(error);\n        // エラー発生時の処理\n        setChanged(error.message); // throwしたエラーメッセージを表示\n    }\n  };\n\n  return (\n    <div className=\"profile-container\">\n      {editMode ? ( // 編集モードの場合のUI\n        <form onSubmit={handleSubmit}>\n          <label>\n            Email\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={userDetails.email}\n              disabled // メールアドレスは変更不可\n            />\n          </label>\n          <label>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={updatedDetails.name}\n              onChange={handleInputChange} // ユーザー名変更時の処理\n            />\n          </label>\n          <button type=\"submit\">保存</button> {/* 保存ボタン */}\n          \n        {/* メッセージ表示エリア */}\n        {changed && (\n          <div className={`feedback-message ${changed.includes('正常') ? 'success' : 'error'}`}>\n            {changed}\n          </div>\n        )}\n\n        </form>\n      ) : ( // 通常表示モードの場合のUI\n        <div className=\"profile-details\">\n          <h1>こんにちは, {userDetails.name}</h1>\n          <p> <b>Email:</b> {userDetails.email}</p>\n          <button onClick={handleEdit}>編集</button> {/* 編集ボタン */}\n          <span \n            style={{\n              color: 'green',\n              height: '.5cm',\n              display: 'block',\n              fontStyle: 'italic',\n              fontSize: '12px'\n            }}>\n            {changed}\n          </span> {/* 更新メッセージを表示 */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Profile; // Profileコンポーネントをエクスポート\n","import React, { useEffect } from 'react';                   // Reactをインポート\nimport { Link, useNavigate } from 'react-router-dom';       // LinkとuseNavigateをインポート\nimport { useAppContext } from '../../context/AuthContext';  // アプリケーションの状態管理用コンテキストをインポート\n\n// Navbarコンポーネントを定義\nexport default function Navbar() {  \n    // コンテキストからログイン状態、ユーザー名を取得\n    const { isLoggedIn, setIsLoggedIn, userName, setUserName } = useAppContext();  \n\n    const navigate = useNavigate();  // ページ遷移を制御するためのuseNavigateを定義\n\n    // コンポーネントがマウントされた際に実行される副作用処理\n    // isLoggedIn、setIsLoggedIn、setUserNameが変更された時にも再実行される\n    useEffect(() => {  \n        const authTokenFromSession = sessionStorage.getItem('auth-token');  // セッションから認証トークンを取得\n        const nameFromSession = sessionStorage.getItem('name');             // セッションからユーザー名を取得\n\n        // 認証トークンが存在する場合\n        if (authTokenFromSession) {  \n            if (isLoggedIn && nameFromSession) {    // すでにログインしている場合\n                setUserName(nameFromSession);           // ユーザー名を設定\n            } else {                                // ログインしていない場合\n                sessionStorage.removeItem('auth-token');    // セッションから認証トークンを削除\n                sessionStorage.removeItem('name');          // セッションから名前を削除\n                sessionStorage.removeItem('email');         // セッションからメールを削除\n                setIsLoggedIn(false);                       // ログイン状態をfalseに設定\n            }\n        }\n    }, [isLoggedIn, setIsLoggedIn, setUserName]);  // isLoggedIn、setIsLoggedIn、setUserNameが変更された時に再実行\n\n    // ログアウト処理\n    const handleLogout = () => {  \n        sessionStorage.removeItem('auth-token');    // セッションから認証トークンを削除\n        sessionStorage.removeItem('name');          // セッションから名前を削除\n        sessionStorage.removeItem('email');         // セッションからメールを削除\n        setIsLoggedIn(false);                       // ログイン状態をfalseに設定\n        navigate(`/app`);                           // アプリのトップページに遷移\n    };\n\n    // プロフィールページに遷移する処理\n    const profileSecton = () => {  \n        navigate(`/app/profile`);  // プロフィールページに遷移\n    };\n\n\n    return (  // JSXでナビゲーションバーを描画\n    <>\n        {/* ナビゲーションバーの開始 */}\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\" id='navbar_container'> \n\n            <div className='navbar-brand'>\n                {/* ブランド名リンク */}\n                <Link className=\"navbar-brand-link\" to=\"/app\">GiftLink</Link>  \n            </div>\n\n\n            {/* ナビゲーションのトグルボタン */}\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">  \n                <span className=\"navbar-toggler-icon\"></span>  {/* トグルアイコン */}\n            </button>\n\n            {/* ナビゲーションメニューのコンテンツ */}\n            <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarNav\">  \n                {/* ナビゲーションメニューのリスト */}\n                <ul className=\"navbar-nav\">  \n                    {/* ギフトページへのリンク */}\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/app\">Gifts</Link>  \n                    </li>\n                    {/* 検索ページへのリンク */}\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/app/search\">Search</Link>  \n                    </li>\n                    {/* ログイン状態に応じたナビゲーション */}\n                    <ul className=\"navbar-nav ml-auto\">  \n                        {isLoggedIn ? (  // ログインしている場合\n                        <>\n                            <li className=\"nav-item\">\n                                {/* ユーザー名の表示 */}\n                                <span className=\"nav-link\" style={{ color: \"black\", cursor: \"pointer\" }} onClick={profileSecton}>\n                                    Welcome, {userName}\n                                </span>  \n                            </li>\n                            <li className=\"nav-item\">\n                                {/* ログアウトボタン */}\n                                <button className=\"nav-link login-btn\" onClick={handleLogout}>Logout</button>  \n                            </li>\n                        </>\n                        ) : (  // ログインしていない場合\n                        <>\n                            <li className=\"nav-item\">\n                                {/* ログインページへのリンク */}\n                                <Link className=\"nav-link login-btn\" to=\"/app/login\">Login</Link>  \n                            </li>\n                            <li className=\"nav-item\">\n                                {/* 登録ページへのリンク */}\n                                <Link className=\"nav-link register-btn\" to=\"/app/register\">Register</Link>  \n                            </li>\n                        </>\n                        )}\n                    </ul>\n                </ul>\n            </div>\n\n        </nav>  {/* ナビゲーションバーの終了 */}\n    </>\n    );\n}  // Navbarコンポーネントの終了\n","// ReactとReact Routerの機能をインポート\nimport React, { useState } from 'react';            // ReactライブラリとuseStateフックをインポート\nimport { Routes, Route } from 'react-router-dom';   // React Routerのルーティング機能をインポート\n\n// 各ページコンポーネントをインポート\nimport InitialPage from './components/InitialPage/InitialPage';     // 初期ページのコンポーネント\nimport MainPage from './components/MainPage/MainPage';              // メインページのコンポーネント\nimport LoginPage from './components/LoginPage/LoginPage';           // ログインページのコンポーネント\nimport RegisterPage from './components/RegisterPage/RegisterPage';  // 新規登録ページのコンポーネント\nimport SearchPage from './components/SearchPage/SearchPage';        // 検索ページのコンポーネント\nimport DetailsPage from './components/DetailsPage/DetailsPage';     // 商品詳細ページのコンポーネント\nimport Profile from './components/Profile/Profile';                 // プロフィールページのコンポーネント\n\n// Bootstrapのスタイルシートをインポート\nimport 'bootstrap/dist/css/bootstrap.min.css';  // BootstrapのCSSをインポート\nimport './App.css';                             // アプリケーションのカスタムCSSをインポート\n\n// ナビゲーションバーコンポーネントをインポート\nimport Navbar from './components/Navbar/Navbar'; // ナビゲーションバーのコンポーネントをインポート\n\nfunction App() {\n  const [visited, setVisited] = useState(false); // 初回訪問かどうかを管理するstate\n\n  return (\n    <>\n      {/* ナビゲーションバーを表示 */}\n      <Navbar /> \n      <Routes>\n        {/* 初回訪問時に InitialPage を表示 */}\n        {!visited ? (\n          <Route path=\"/\" element={<InitialPage onVisit={() => setVisited(true)} />} /> // 初回訪問時の処理\n        ) : (\n          <Route path=\"/\" element={<MainPage />} /> // それ以降はMainPageを表示\n        )}\n        {/* /appパスでMainPageを表示 */}\n        <Route path=\"/app\" element={<MainPage />} />\n\n        {/* /app/loginでLoginPageを表示 */}\n        <Route path=\"/app/login\" element={<LoginPage />} />\n\n        {/* /app/registerでRegisterPageを表示 */}\n        <Route path=\"/app/register\" element={<RegisterPage />} />\n\n        {/* /app/searchでSearchPageを表示 */}\n        <Route path=\"/app/search\" element={<SearchPage />} />\n\n        {/* /app/product/:productIdでDetailsPageページを表示 */}\n        <Route path=\"/app/product/:productId\" element={<DetailsPage />} />\n\n        {/* /app/profileでProfileページを表示 */}\n        <Route path=\"/app/profile\" element={<Profile />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App; // Appコンポーネントをエクスポート\n","import React from 'react';                                  // React ライブラリをインポート\nimport ReactDOM from 'react-dom/client';                    // ReactDOM ライブラリをインポート（React 18 以降の新しい API）\nimport { BrowserRouter as Router } from 'react-router-dom'; // react-router-dom から Router をインポート（ルーティング用）\nimport './index.css';                                       // グローバルなスタイルをインポート\nimport App from './App';                                    // アプリケーションのメインコンポーネントである App をインポート\nimport { AuthProvider } from './context/AuthContext';       // 認証情報を提供するコンテキストプロバイダーをインポート\n\nconst root = ReactDOM.createRoot(document.getElementById('root')); // 'root' ID を持つ DOM 要素を取得し、React のルートを作成\n\nroot.render(\n  <React.StrictMode>\n    <Router> {/* アプリケーション全体にルーティング機能を提供 */}\n      <AuthProvider> {/* アプリケーション全体に認証コンテキストを提供 */}\n        <App /> {/* メインのアプリケーションコンポーネントを表示 */}\n      </AuthProvider>\n    </Router>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}